{"version":3,"sources":["assets/img1.png","assets/img2.png","assets/img3.jpg","components/MainButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainButton","title","id","onClick","active","Button","variant","data-testid","App","useState","currentImageIndex","setCurrentImageIndex","images","require","Container","fluid","Row","Col","xs","md","Image","src","rounded","thumbnail","role","length","ButtonGroup","map","img","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8KAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,kJCU5BC,EAPI,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,OACrC,OACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,cAAaL,EAAIC,QAAS,kBAAMA,KAAYC,OAAQA,GAAUH,ICiCjFO,EAlCH,WAAO,IAAD,EACoCC,mBAAS,GAD7C,mBACPC,EADO,KACYC,EADZ,KAIRC,EAAS,CACXC,EAAQ,IACRA,EAAQ,IACRA,EAAQ,KAKd,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GACZ,kBAACC,EAAA,EAAD,CAAOC,IAAKT,EAAOF,GAAoBY,SAAO,EAACf,cAAY,MAAMgB,WAAS,EAACC,KAAK,SAASrB,QAAS,kBANhFO,IAAsBE,EAAOa,OAAS,EAAId,EAAqB,GAAIA,EAAqBD,EAAkB,QASlI,kBAACM,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,KACKd,EAAOe,KAAI,SAACC,EAAKC,GAAN,OAAgB,kBAAC,EAAD,CACxBC,IAAKD,EACL5B,MAAK,iBAAY4B,EAAM,GACvB3B,GAAE,iBAAY2B,EAAM,GACpB1B,QAAS,kBAAMQ,EAAqBkB,IACpCzB,OAASM,IAAsBmB,WClB/BE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d12ec915.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img1.e492ccf6.png\";","module.exports = __webpack_public_path__ + \"static/media/img2.ed1a8749.png\";","module.exports = __webpack_public_path__ + \"static/media/img3.e96d69ab.jpg\";","import {Button, } from \"react-bootstrap\";\nimport React from \"react\";\n\nconst MainButton = ({title, id, onClick, active}) => {\n    return (\n        <Button variant=\"primary\" data-testid={id} onClick={() => onClick() } active={active} >{title}</Button>\n    )\n};\n\n\nexport default MainButton;\n","import React, {useState} from 'react';\nimport './App.css';\nimport {ButtonGroup, Col, Container, Image, Row} from \"react-bootstrap\";\nimport MainButton from \"./components/MainButton\";\nconst App = () => {\n    const [currentImageIndex, setCurrentImageIndex] = useState(0);\n\n\n    const images = [\n        require(\"./assets/img1.png\"),\n        require(\"./assets/img2.png\"),\n        require(\"./assets/img3.jpg\")\n    ];\n\n    const showNextImage = () => currentImageIndex === images.length - 1 ? setCurrentImageIndex(0): setCurrentImageIndex(currentImageIndex+1);\n\n  return (\n    <Container fluid>\n      <Row>\n          <Col xs={6} md={4}>\n              <Image src={images[currentImageIndex]} rounded data-testid=\"img\" thumbnail role='button' onClick={() => showNextImage()} />\n          </Col>\n      </Row>\n        <Row >\n            <ButtonGroup>\n                {images.map((img, index) => <MainButton\n                    key={index}\n                    title={`Button ${index+1}`}\n                    id={`button-${index+1}`}\n                    onClick={() => setCurrentImageIndex(index)}\n                    active={ currentImageIndex === index }\n                    /> )}\n            </ButtonGroup>\n        </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}